
package GroupProject1;

import java.util.*;
import javafx.application.Application;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.collections.*;

public class MadisonHotelJavaFX extends Application
{
    static ArrayList<Employee> employees = new ArrayList<Employee>();
    static ArrayList<Guest> guests = new ArrayList<Guest>();
    static ArrayList<ValueGuest> valueGuests = new ArrayList<ValueGuest>();
    static ArrayList<Booking> bookings = new ArrayList<Booking>();
    static ArrayList<Room> rooms = new ArrayList<Room>();
    
    public void start(Stage loginStage) 
    {
        // Controls
        Label lblUsername = new Label("Username: ");
        Label lblPassword = new Label("Password: ");
        Button btnLogin = new Button("Login ->");
        TextField txtUsername = new TextField();
        TextField txtPassword = new TextField();        
        String[] users = {"Guest", "Employee"};
        ComboBox userCombo = new ComboBox();
        userCombo.getItems().add("Guest");
        userCombo.getItems().add("Employee");
        Button btnExit = new Button("Exit Program");
        
        btnLogin.setOnAction(e ->
        {
            String choice = (String) userCombo.getValue();
            if (choice.equalsIgnoreCase("Employee"))
            {
                for (int i = 0; i < employees.size(); i++)
                {
                    if (employees.get(i).checkCredentials(txtUsername.getText(), 
                            txtPassword.getText()))
                    {
                        loginStage.hide();
                        Stage employeeStage = new Stage();
                        employee(employeeStage);
                        break;
                    }
                }
            }
            else if (choice.equalsIgnoreCase("Guest"))
            {    
                for (int i = 0; i < guests.size(); i++)
                {
                    if (guests.get(i).checkCredentials(txtUsername.getText(), 
                            txtPassword.getText()))
                    {
                        loginStage.hide();
                        Stage guestStage = new Stage();
                        guest(guestStage);
                        break;
                    }
                }
            }
//            else if (choice.equalsIgnoreCase("Guest"))
//            {
//                for (int i = 0; i < valueGuests.size(); i++)
//                {
//                    if (valueGuests.get(i).checkCredentials(txtUsername.getText(), 
//                          txtPassword.getText()))
//                    {
//                        loginStage.hide();
//                        Stage valueGuestStage = new Stage();
//                        guest(valueGuestStage);
//                        break;
//                    }
//                }
//            }
            else
            {
                System.out.println("Please enter a valid username "
                        + "and password login.");
            }
        });
        btnExit.setOnAction(e ->
        {
           loginStage.close(); 
        });
                
        // Pane
        GridPane loginPane = new GridPane();
        loginPane.setAlignment(Pos.CENTER);
        loginPane.setVgap(10);
        loginPane.setHgap(10);
        loginPane.add(lblUsername, 0, 0);
        loginPane.add(lblPassword, 0, 1);
        loginPane.add(txtUsername, 1, 0);
        loginPane.add(txtPassword, 1, 1);
        loginPane.add(btnLogin, 1, 3);
        loginPane.add(userCombo, 1, 2);
        loginPane.add(btnExit, 1, 4);
        
        // Scene
        Scene loginScene = new Scene(loginPane, 500, 300);
        
        // Stage
        loginStage.setTitle("Madison Hotel - Login");
        loginStage.setScene(loginScene);
        loginStage.show();     
        

    }
    public void guest(Stage guestStage)
    {
        // Controls
        
        
        // Pane
        TabPane guestTabs = new TabPane();
        GridPane bookRoomPane = new GridPane();
        GridPane roomReportPane = new GridPane();
        GridPane personalInfoPane = new GridPane();
        
        Tab bookRoomTab = new Tab("Book Room");
        bookRoomTab.setContent(bookRoomPane);
        guestTabs.getTabs().add(bookRoomTab);
        
        Tab roomReportTab = new Tab("Room Report");
        roomReportTab.setContent(roomReportPane);
        guestTabs.getTabs().add(roomReportTab);
        
        Tab personalInfoTab = new Tab("Personal Information");
        personalInfoTab.setContent(personalInfoPane);
        guestTabs.getTabs().add(personalInfoTab);
        
        // Scene
        Scene guestScene = new Scene(guestTabs, 500, 600);
        
        // Stage
        guestStage.setTitle("Madison Hotel - Guest Menu");
        guestStage.setScene(guestScene);
        guestStage.show();
    }
    public void employee(Stage employeeStage)
    {
        // Controls
        Button btnCreateRoom = new Button("Create a new Room");
        Button btnEditRoom = new Button("Edit a Room");
        Button btnActive = new Button("Set a Room Active/Inactive");
        Button btnLogout = new Button("Logout ->");
        // Pane
        TabPane employeeTabs = new TabPane();
        
        
        GridPane bookReportPane = new GridPane();
        
        
        GridPane checkOutPane = new GridPane();
        
        
        GridPane createGuestPane = new GridPane();
        
        
        GridPane createEmployeePane = new GridPane();

        
        GridPane editRoomPane = new GridPane();
        editRoomPane.setAlignment(Pos.CENTER);
        editRoomPane.setVgap(10);
        editRoomPane.setHgap(10);
        editRoomPane.add(btnCreateRoom, 0, 0);
        editRoomPane.add(btnEditRoom, 0, 1);
        editRoomPane.add(btnActive, 0, 2);
        editRoomPane.add(btnLogout, 0, 4);
        
        btnLogout.setOnAction(e ->
        {
            employeeStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnCreateRoom.setOnAction(e ->
        {
            employeeStage.hide();
            Stage createRoomStage = new Stage();
            createRoom(createRoomStage);
        });
        
        Tab bookReportTab = new Tab("Booking Report");
        bookReportTab.setContent(bookReportPane);
        employeeTabs.getTabs().add(bookReportTab);
        
        Tab checkOutTab = new Tab("Check Guest Out");
        checkOutTab.setContent(checkOutPane);
        employeeTabs.getTabs().add(checkOutTab);
        
        Tab createGuestTab = new Tab("Create Guest Account");
        createGuestTab.setContent(createGuestPane);
        employeeTabs.getTabs().add(createGuestTab);
        
        Tab createEmployeeTab = new Tab("Create Employee Account");
        createEmployeeTab.setContent(createEmployeePane);
        employeeTabs.getTabs().add(createEmployeeTab);
        
        Tab editRoomTab = new Tab("Create/Edit Room");
        editRoomTab.setContent(editRoomPane);
        employeeTabs.getTabs().add(editRoomTab);
        
        // Scene
        Scene employeeScene = new Scene(employeeTabs, 630, 520);
        
        // Stage
        employeeStage.setTitle("Madison Hotel - Employee Menu");
        employeeStage.setScene(employeeScene);
        employeeStage.show();
    }
    public void createRoom(Stage createRoomStage)
    {
        // Controls
        Label lblBed = new Label("Bed: ");
        ComboBox bedCombo = new ComboBox();
        bedCombo.getItems().add("1x Queen Bed");
        bedCombo.getItems().add("2x Queen Bed");
        bedCombo.getItems().add("1x King Bed");
        Label lblKitch = new Label("Kitchen: ");
        ComboBox kitchCombo = new ComboBox();
        kitchCombo.getItems().add("Microwave");
        kitchCombo.getItems().add("Fridge + Microwave");
        Label lblCoffee = new Label("Coffee");
        ComboBox coffeeCombo = new ComboBox();
        coffeeCombo.getItems().add("1-Cup Std. Coffee Machine");
        coffeeCombo.getItems().add("Keurig Hot K200 Machine");
        Label lblAccess = new Label("Accessibility: ");
        ComboBox accessCombo = new ComboBox();
        accessCombo.getItems().add("Standard Room");
        accessCombo.getItems().add("Enhanced Accessibility Room");
        Label lblRoomNumber = new Label("Room Numbers: ");
        TextField txtRoomNumber = new TextField();
        Label lblRoomPrice = new Label("Price per Night");
        TextField txtRoomPrice = new TextField();
        Button btnAddRoom = new Button("Add Room ->");
        Button btnEmpMenu = new Button("Employee Menu ->");
        ListView lvOutput = new ListView();
        lvOutput.getItems().add("");
        
        btnEmpMenu.setOnAction(e ->
        {
            createRoomStage.hide();
            Stage employeeStage = new Stage();
            employee(employeeStage);
        });
        
        btnAddRoom.setOnAction(e ->
        {
            String bed = (String) bedCombo.getValue();
            int bedChoice = 0;
            if (bed.equalsIgnoreCase("1x Queen Bed"))
            {
                bedChoice = 0;
            }
            else if (bed.equalsIgnoreCase("2x Queen Bed"))
            {
                bedChoice = 1;
            }
            else if (bed.equalsIgnoreCase("1x King Bed"))
            {
                bedChoice = 2;
            }
            String kitch = (String) kitchCombo.getValue();
            int kitchChoice = 0;
            if (kitch.equalsIgnoreCase("Microwave"))
            {
                kitchChoice = 0;
            }
            else if (kitch.equalsIgnoreCase("Fridge + Microwave"))
            {
                kitchChoice = 1;
            }
            String coffee = (String) coffeeCombo.getValue();
            int coffeeChoice = 0;
            if (coffee.equalsIgnoreCase("1-Cup Std. Coffee Machine"))
            {
                coffeeChoice = 0;
            }
            else if (coffee.equalsIgnoreCase("Keurig Hot K200 Machine"))
            {
                coffeeChoice = 1;
            }
            String access = (String) accessCombo.getValue();
            int accessChoice = 0;
            if (access.equalsIgnoreCase("Standard Room"))
            {
                accessChoice = 0;
            }
            else if (access.equalsIgnoreCase("Enhanced Accessibility Room"))
            {
                accessChoice = 1;
            }
            int roomNumber = 0;
            roomNumber = Integer.parseInt(txtRoomNumber.getText());
            double roomPrice = 0;
            roomPrice = Double.parseDouble(txtRoomPrice.getText());
            if (bed != null || kitch != null || coffee != null 
                    || access != null || roomNumber > 0 || roomPrice > 0)
            {
                Room r = new Room(bedChoice, kitchChoice, coffeeChoice, 
                        accessChoice, roomNumber, roomPrice);
                rooms.add(r);
                for (int i = 0; i < rooms.size(); i++)
                {
                    if (rooms.get(i).equals(r))
                    {
                        String booked = null;
                        if (rooms.get(i).isBooked())
                        {
                            booked = "[Unavailable]";
                        }
                        else
                        {
                            booked = "[Available]";
                        }
                            lvOutput.getItems().add("Room " 
                                    + rooms.get(i).roomNumber 
                                    + " Booking Qty: " 
                                    + rooms.get(i).getRoomBookedQuantity() 
                                    + " " + booked);
                    }
                }
            }
        });        
        
        // Pane        
        GridPane createRoomPane = new GridPane();
        createRoomPane.setVgap(20);
        createRoomPane.setHgap(20);
        createRoomPane.add(lblBed, 0, 1);
        createRoomPane.add(bedCombo, 1, 1);
        createRoomPane.add(lblKitch, 0, 2);
        createRoomPane.add(kitchCombo, 1, 2);
        createRoomPane.add(lblCoffee, 0, 3);
        createRoomPane.add(coffeeCombo, 1, 3);
        createRoomPane.add(lblAccess, 0, 4);
        createRoomPane.add(accessCombo, 1, 4);
        createRoomPane.add(lblRoomNumber, 0, 10);
        createRoomPane.add(txtRoomNumber, 1, 10);
        createRoomPane.add(btnAddRoom, 1, 16);
        createRoomPane.add(btnEmpMenu, 3, 16);
        createRoomPane.add(lvOutput, 3, 1, 1, 15);
        createRoomPane.add(lblRoomPrice, 0, 11);
        createRoomPane.add(txtRoomPrice, 1, 11);
        
        // Scene
        Scene createRoomScene = new Scene(createRoomPane, 630, 520);
        
        // Stage
        createRoomStage.setTitle("Madison Hotel - Create a Room");
        createRoomStage.setScene(createRoomScene);
        createRoomStage.show();
    }
    public void stop()
    {
        //this will run before any program ends
        //code in here is guaranteed to run before the program closes
        //cleanup method
    }
    public static void main(String args[])
    {
        Employee employee1 = new Employee("Adam", "pass", "adam hitchings");
        employees.add(employee1);
        Guest guest1 = new Guest("Brendan", "pass", "brendan boyle");
        guests.add(guest1);
        Guest guest2 = new Guest("John", "pass", "johnny guo");
        guests.add(guest2);
        Employee employee2 = new Employee("Isaac", "pass", "isaac gamble");
        employees.add(employee2);
        Room room1 = new Room(0, 0, 0, 0, 100, 200.0);
        rooms.add(room1);
        Room room2 = new Room(1, 1, 1, 1, 201, 200.0);
        rooms.add(room2);
        Room room3 = new Room(2, 1, 0, 1, 302, 300.0);
        rooms.add(room3);
        ValueGuest valueGuest1 = new ValueGuest("George", "pass", "george moy");
        valueGuests.add(valueGuest1);
        Room room4 = new Room(2, 0, 0, 0, 308, 150.0);
        rooms.add(room4);
        Room room5 = new Room(1, 1, 1, 1, 400, 250.0);
        rooms.add(room5);
        Booking book1 = new Booking(guest1, room3, 2005, 1, 4);
        bookings.add(book1);
        Booking book2 = new Booking(guest1, room4, 2005, 1, 4);
        bookings.add(book2);
        
        Application.launch(args);
    }
    public static void print()
    {
        System.out.println(" ");
    }
}
