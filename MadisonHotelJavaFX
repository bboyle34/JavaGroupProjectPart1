
package GroupProject1;

import java.util.*;
import javafx.application.Application;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.collections.*;

public class MadisonHotelJavaFX extends Application
{
    static ArrayList<Employee> employees = new ArrayList<Employee>();
    static ArrayList<Guest> guests = new ArrayList<Guest>();
    static ArrayList<ValueGuest> valueGuests = new ArrayList<ValueGuest>();
    static ArrayList<Booking> bookings = new ArrayList<Booking>();
    static ArrayList<Room> rooms = new ArrayList<Room>();
    
    public void start(Stage loginStage) 
    {
        //read the database
        // Controls
        Label lblUsername = new Label("Username: ");
        Label lblPassword = new Label("Password: ");
        Button btnLogin = new Button("Login ->");
        TextField txtUsername = new TextField();
        TextField txtPassword = new TextField();        
        String[] users = {"Guest", "Employee"};
        ComboBox userCombo = new ComboBox();
        userCombo.getItems().add("Guest");
        userCombo.getItems().add("Employee");
        userCombo.getItems().add("Value Guest");
        Button btnExit = new Button("Exit Program");
        Label lblError = new Label("");
        
        btnLogin.setOnAction(e ->
        {
            boolean operator = true;
            String choice = (String) userCombo.getValue();
            if (choice.equalsIgnoreCase("Employee"))
            {
                for (int i = 0; i < employees.size(); i++)
                {
                    if (employees.get(i).checkCredentials(txtUsername.getText(), 
                            txtPassword.getText()))
                    {
                        operator = false;
                        loginStage.close();
                        Stage employeeStage = new Stage();
                        employee(employeeStage, employees.get(i));
                        break;
                    }
                }
                if (operator)
                {
                    lblError.setText("Invalid Employee Username or Password");
                }
            }
            else if (choice.equalsIgnoreCase("Guest"))
            {    
                for (int i = 0; i < guests.size(); i++)
                {
                    if (guests.get(i).checkCredentials(txtUsername.getText(), 
                            txtPassword.getText()))
                    {
                        operator = false;
                        loginStage.close();
                        Stage guestStage = new Stage();
                        guest(guestStage, guests.get(i));
                        break;
                    }
                }
                if (operator)
                {
                    lblError.setText("Invalid Guest Username or Password");
                }
            }
            else if (choice.equalsIgnoreCase("Value Guest"))
            {
                for (int i = 0; i < valueGuests.size(); i++)
                {
                    if (valueGuests.get(i).checkCredentials(txtUsername.getText(), 
                          txtPassword.getText()))
                    {
                        operator = false;
                        loginStage.close();
                        Stage valueGuestStage = new Stage();
                        guest(valueGuestStage, valueGuests.get(i));
                        break;
                    }
                }
                if (operator)
                {
                    lblError.setText("Invalid Value Guest Username or Password");
                }
            }
        });
        btnExit.setOnAction(e ->
        {
           loginStage.close(); 
        });
                
        // Pane
        GridPane loginPane = new GridPane();
        loginPane.setAlignment(Pos.CENTER);
        loginPane.setVgap(10);
        loginPane.setHgap(10);
        loginPane.add(lblUsername, 0, 0);
        loginPane.add(lblPassword, 0, 1);
        loginPane.add(txtUsername, 1, 0);
        loginPane.add(txtPassword, 1, 1);
        loginPane.add(btnLogin, 1, 3);
        loginPane.add(userCombo, 1, 2);
        loginPane.add(btnExit, 1, 4);
        loginPane.add(lblError, 1, 5, 2, 1);
        
        // Scene
        Scene loginScene = new Scene(loginPane, 500, 300);
        
        // Stage
        loginStage.setTitle("Madison Hotel - Login");
        loginStage.setScene(loginScene);
        loginStage.show();     
        

    }
    public void guest(Stage guestStage, Guest guest)
    {
        String guestName = guest.getGuestName();
        // Controls
        // Book Room Tab
        Label sceneTitle1 = new Label("  Welcome " + guestName);
        Label sceneTitle2 = new Label("  Welcome " + guestName);
        Label sceneTitle3 = new Label("  Welcome " + guestName);
        Label lblFreeRoom = new Label("Free Rooms: ");
        ListView lvFreeRoom = new ListView();
        for (int i = 0; i < rooms.size(); i++)
        {
            String booked = null;
            if (!(rooms.get(i).isBooked()))
            {
                booked = "[Available]";
                lvFreeRoom.getItems().add("Room " 
                + rooms.get(i).roomNumber 
                + ", " + rooms.get(i).printKitchOption()
                + ", \n" + rooms.get(i).printCoffeeOption()
                + ", " + booked);
            }
        }
        Label lbCheckYear = new Label("Check In Year: ");
        TextField txtCheckYear = new TextField();
        Label lbCheckDay = new Label("Check In Day: ");
        TextField txtCheckDay = new TextField();
        Label lbCheckOut = new Label("Check Out Day: ");
        TextField txtCheckOut = new TextField();
        Button btnBookRoom = new Button("Book Room ^");
        Button btnLogout1 = new Button("<- Logout");       
        btnLogout1.setOnAction(e ->
        {
            guestStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnBookRoom.setOnAction(e ->
        {
            String room = (String) lvFreeRoom.getSelectionModel().getSelectedItem();
            int year = Integer.parseInt(txtCheckYear.getText());
            int checkIn = Integer.parseInt(txtCheckDay.getText());
            int checkOut = Integer.parseInt(txtCheckOut.getText());
            int number = 0;
            boolean operator = false;

            if (room != null && checkIn > 0 && checkOut > 0)
            {
                try
                {
                    number = Integer.parseInt(room.substring(5, 8));                        
                }
                catch (Exception f)
                {
                    number = Integer.parseInt(room.substring(5, 7));
                }
                for (int i = 0; i < rooms.size(); i++)
                {
                    if (rooms.get(i).roomNumber == number)
                    {
                        Booking b = new Booking(guest, rooms.get(i), year, 
                                checkIn, checkOut);
                        bookings.add(b);
                        operator = true;
                    }
                }
                if (operator)
                {
                    lvFreeRoom.getItems().clear();
                    for (int i = 0; i < rooms.size(); i++)
                    {
                        String booked = null;
                        if (!(rooms.get(i).isBooked()))
                        {
                            booked = "[Available]";
                            lvFreeRoom.getItems().add("Room " 
                            + rooms.get(i).roomNumber 
                            + ", " + rooms.get(i).printKitchOption()
                            + ", \n" + rooms.get(i).printCoffeeOption()
                            + ", " + booked);
                        }
                    }
                    txtCheckYear.clear();
                    txtCheckDay.clear();
                    txtCheckOut.clear();                  
                }
            }
        });
        
        // Room Report Tab
        Label lblRooms = new Label("Rooms: ");
        ListView lvRooms = new ListView();
        for (int i = 0; i < rooms.size(); i++)
        {
            lvRooms.getItems().add("Room " + rooms.get(i).roomNumber);
        }
        TextArea txtRoomReport = new TextArea();
        Button btnRoomReport = new Button("Room Report ^");
        Button btnLogout2 = new Button("<- Logout");
        btnLogout2.setOnAction(e ->
        {
            guestStage.hide();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnRoomReport.setOnAction(e ->
        {
            int choice = lvRooms.getSelectionModel().getSelectedIndex();
            txtRoomReport.setText(rooms.get(choice).roomDescription());
        });
        
        // Personal Info Tab
        Label lblGuestNameInfo1 = new Label("Guest Name: ");
        Label lblGuestNameInfo2 = new Label(guest.getGuestName());
        Label lblGuestUsernameInfo1 = new Label("Guest Username: ");
        Label lblGuestUsernameInfo2 = new Label(guest.getUsername());
        Label lblGuestBookings = new Label("Guest Bookings: ");
        ListView lvGuestBookings = new ListView();
        int count = 0;
        for (int i = 0; i < bookings.size(); i++)
        {
            if (bookings.get(i).bookingGuest.equals(guest))
            {
                lvGuestBookings.getItems().add("Room " 
                        + bookings.get(i).bookedRoom.roomNumber 
                        + "\nCheck in Year " + bookings.get(i).bookingYear 
                        + " \nCheck in Day " + bookings.get(i).checkInDay 
                        + " Check out Day " + bookings.get(i).checkOutDay);
                count++;
            }
        }
        if (count == 0)
        {
            lvGuestBookings.getItems().add("You currently have no Bookings");
        }
        Button btnChangeGuestName = new Button("Change Guest Name");
        Button btnChangeGuestPassword = new Button("Change Guest Password");
        Button btnLogout3 = new Button("<- Logout");
        btnLogout3.setOnAction(e ->
        {
            guestStage.hide();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnChangeGuestName.setOnAction(e ->
        {
            Stage changeGuestNameStage = new Stage();
            changeGuestName(changeGuestNameStage, guest);
            guestStage.close();
        });
        
        // Room Service Tab
        
        
        // Pane
        TabPane guestTabs = new TabPane();
        
        GridPane bookRoomPane = new GridPane();
        bookRoomPane.setAlignment(Pos.CENTER);
        bookRoomPane.setVgap(10);
        bookRoomPane.setHgap(10);
        bookRoomPane.add(sceneTitle1, 0, 0, 2, 1);
        bookRoomPane.add(lblFreeRoom, 0, 1);
        bookRoomPane.add(lvFreeRoom, 1, 1, 2, 1);
        bookRoomPane.add(lbCheckYear, 0, 2);
        bookRoomPane.add(txtCheckYear, 1, 2);
        bookRoomPane.add(lbCheckDay, 0, 3);
        bookRoomPane.add(txtCheckDay, 1, 3);
        bookRoomPane.add(lbCheckOut, 0, 4);
        bookRoomPane.add(txtCheckOut, 1, 4);
        bookRoomPane.add(btnBookRoom, 1, 5);
        bookRoomPane.add(btnLogout1,3, 5);
        
        GridPane roomReportPane = new GridPane();
        roomReportPane.setAlignment(Pos.CENTER);
        roomReportPane.setVgap(10);
        roomReportPane.setHgap(10);
        roomReportPane.add(sceneTitle2, 0, 0, 2, 1);
        roomReportPane.add(lblRooms, 2, 0);
        roomReportPane.add(lvRooms, 1, 1, 1, 15);
        roomReportPane.add(txtRoomReport, 2, 1, 1, 15);
        roomReportPane.add(btnRoomReport, 1, 16);
        roomReportPane.add(btnLogout2, 2, 16);
        
        GridPane personalInfoPane = new GridPane();
        personalInfoPane.setOnMouseEntered(e ->
        {
            lvGuestBookings.getItems().clear();
            int thisCount = 0;
            for (int i = 0; i < bookings.size(); i++)
            {
                if (guest.equals(bookings.get(i).bookingGuest))
                {
                    lvGuestBookings.getItems().add("Room " 
                        + bookings.get(i).bookedRoom.roomNumber 
                        + "\nCheck in Year " + bookings.get(i).bookingYear 
                        + " \nCheck in Day " + bookings.get(i).checkInDay 
                        + " Check out Day " + bookings.get(i).checkOutDay);
                    thisCount++;
                }
            }
            if (thisCount == 0)
            {
                lvGuestBookings.getItems().add("You currently have no Bookings");
            }
        });
        personalInfoPane.setAlignment(Pos.CENTER);
        personalInfoPane.setVgap(10);
        personalInfoPane.setHgap(10);
        personalInfoPane.add(sceneTitle3, 0, 0, 2, 1);
        personalInfoPane.add(lblGuestNameInfo1, 0, 1);
        personalInfoPane.add(lblGuestNameInfo2, 1, 1);
        personalInfoPane.add(lblGuestUsernameInfo1, 0, 2);
        personalInfoPane.add(lblGuestUsernameInfo2, 1, 2);
        personalInfoPane.add(lblGuestBookings, 0, 3);
        personalInfoPane.add(lvGuestBookings, 1, 3, 1, 15);
        personalInfoPane.add(btnChangeGuestName, 0, 19);
        personalInfoPane.add(btnChangeGuestPassword, 1, 19);
        personalInfoPane.add(btnLogout3, 3, 19);
        
        GridPane roomServicePane = new GridPane();
        roomServicePane.setAlignment(Pos.CENTER);
        roomServicePane.setVgap(10);
        roomServicePane.setHgap(10);
//        roomServicePane.add(sceneTitle4, 0, 0, 2, 1);
//        roomServicePane.add(lblGuestNameInfo3, 0, 1);
//        roomServicePane.add(lblGuestNameInfo4, 1, 1);
//        roomServicePane.add(lblGuestUsernameInfo3, 0, 2);
//        roomServicePane.add(lblGuestUsernameInfo4, 1, 2);
//        roomServicePane.add(lvGuestCosts, 1, 3, 1, 15);
//        roomServicePane.add(lblGuestCosts, 0, 4);
//        roomServicePane.add(btnLogout4,3, 19);
        
        
        Tab bookRoomTab = new Tab("Book Room");
        bookRoomTab.setContent(bookRoomPane);
        guestTabs.getTabs().add(bookRoomTab);
        
        Tab roomReportTab = new Tab("Room Report");
        roomReportTab.setContent(roomReportPane);
        guestTabs.getTabs().add(roomReportTab);
        
        Tab personalInfoTab = new Tab("Personal Information");
        personalInfoTab.setContent(personalInfoPane);
        guestTabs.getTabs().add(personalInfoTab);
        
        Tab roomServiceChargeTab = new Tab("Room Service Charge");
        roomServiceChargeTab.setContent(roomServicePane);
        guestTabs.getTabs().add(roomServiceChargeTab);
        
        // Scene
        Scene guestScene = new Scene(guestTabs, 550, 600);
        
        // Stage
        guestStage.setTitle("Madison Hotel - Guest Menu");
        guestStage.setScene(guestScene);
        guestStage.show();
    }
    public void employee(Stage employeeStage, Employee emp)
    {
        String employeeName = emp.getEmployeeName();
        // Controls        
        // Booking Report Tab
        ListView lvBookings = new ListView();
        for (int i = 0; i < bookings.size(); i++)
        {
            lvBookings.getItems().add("Room " 
                    + bookings.get(i).bookedRoom.roomNumber + " booked by " 
                    + bookings.get(i).bookingGuest.getGuestName()); 
        }
        TextArea txtBookingReport = new TextArea();
        Button btnViewBooking = new Button("Booking Report ^");
        Button btnLogout2 = new Button("Logout ->");
        btnLogout2.setOnAction(e ->
        {
            employeeStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnViewBooking.setOnAction(e ->
        {
            int choice = lvBookings.getSelectionModel().getSelectedIndex();
            txtBookingReport.setText(bookings.get(choice).describeBooking());
        });
        
        // Check Out Tab
        Label lblSelectGuest = new Label("Select a Guest: ");
        ListView lvGuests = new ListView();
        for (int i = 0; i < guests.size(); i++)
        {
            lvGuests.getItems().add(guests.get(i).getGuestName() + " [Regular]");
        }
        for (int i = 0; i < valueGuests.size(); i++)
        {
            lvGuests.getItems().add(valueGuests.get(i).getGuestName() + " [Value]");
        }
        Label lblSelectRoom = new Label("Select a Booked Room: ");
        ListView lvRooms = new ListView();
        lvGuests.setOnMouseReleased(e ->
        {
            boolean operator = false;
            int regular = 0;
            int value = 0;
            lvRooms.getItems().clear();
            String name = (String) lvGuests.getSelectionModel().getSelectedItem();
            if (name.substring(name.length() - 9, name.length()).equalsIgnoreCase("[Regular]"))
            {
                for (int i = 0; i < guests.size(); i++)
                {
                    if (name.substring(0, name.length() - 10).equalsIgnoreCase(guests.get(i).getGuestName()))
                    {
                        operator = true;
                        regular = i;
                    }
                }
            }
            else if (name.substring(name.length() - 7, name.length()).equalsIgnoreCase("[Value"))
            {
                for (int i = 0; i < valueGuests.size(); i++)
                {
                    if (name.substring(0, name.length() - 8).equalsIgnoreCase(valueGuests.get(i).getGuestName()))
                    {
                        operator = false;
                        value = i;
                    }
                }
            }
            if (operator)
            {
                for (int i = 0; i < bookings.size(); i++)
                {
                    if (bookings.get(i).bookingGuest.equals(guests.get(regular)))
                    {
                        lvRooms.getItems().add(bookings.get(i).bookedRoom.getRoomNumber());
                    }
                }
            }
            else
            {
                for (int i = 0; i < bookings.size(); i++)
                {
                    if (bookings.get(i).bookingGuest.equals(valueGuests.get(value)))
                    {
                        lvRooms.getItems().add(bookings.get(i).bookedRoom.getRoomNumber());
                    }
                }
            }
        });
        Button btnCheckOut = new Button("Check Guest out of Room");
        Button btnLogout5 = new Button("Logout ->");
        btnLogout5.setOnAction(e ->
        {
            employeeStage.hide();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnCheckOut.setOnAction(e ->
        {
            int guestChoice = lvGuests.getSelectionModel().getSelectedIndex();
            String roomNumber = (String) lvRooms.getSelectionModel().getSelectedItem();
            int roomNumberPlace = Integer.parseInt(roomNumber.substring(5));
            lvRooms.getItems().clear();
            if (guestChoice != -1 && roomNumberPlace != -1)
            {
                for (int i = 0; i < bookings.size(); i++)
                {
                    if(bookings.get(i).bookingGuest.equals(guests.get(guestChoice)) 
                            && bookings.get(i).bookedRoom.roomNumber == roomNumberPlace
                            && bookings.get(i).bookedRoom.isBooked())
                    {
                        bookings.get(i).endBooking();                        
                    }
                }
            }
            for (int i = 0; i < bookings.size(); i++)
            {
                if (guests.get(guestChoice).equals(bookings.get(i).bookingGuest) 
                        && bookings.get(i).bookedRoom.isBooked())
                {
                    lvRooms.getItems().add("Room " 
                            + bookings.get(i).bookedRoom.roomNumber);
                }
            }
        });
        
        // Create Guest Tab
        Label lblSelectType = new Label("Type of Guest: ");
        ComboBox guestTypeCombo = new ComboBox();
        guestTypeCombo.getItems().add("Guest");
        guestTypeCombo.getItems().add("Value Guest");
        Label lblGuestName = new Label("Guest's Name: ");
        TextField txtGuestName = new TextField();
        Label lblGuestUsername = new Label("Guest's Username: ");
        TextField txtGuestUsername = new TextField();
        Label lblGuestPassword = new Label("Guest's Password: ");
        TextField txtGuestPassword = new TextField();
        Label lblGuestList = new Label("All Guests: ");
        ListView lvGuestList = new ListView();
        for (int i = 0; i < guests.size(); i++)
        {
            lvGuestList.getItems().add(guests.get(i).getGuestName() + " [Regular]");
        }
        for (int i = 0; i < valueGuests.size(); i++)
        {
            lvGuestList.getItems().add(valueGuests.get(i).getGuestName() + " [Value]");
        }
        Button btnCreateGuest = new Button("Create Guest");
        Button btnLogout3 = new Button("Logout ->");
        btnLogout3.setOnAction(e ->
        {
            employeeStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnCreateGuest.setOnAction(e ->
        {
            String type = (String) guestTypeCombo.getValue();
            if (!(txtGuestName.getText().equalsIgnoreCase("")) 
                    && !(txtGuestUsername.getText().equalsIgnoreCase("")) 
                    && !(txtGuestPassword.getText().equalsIgnoreCase(""))
                    && type.equalsIgnoreCase("Guest"))
            {
                Guest g = new Guest(txtGuestUsername.getText(), 
                        txtGuestPassword.getText(), txtGuestName.getText());
                guests.add(g);
                lvGuestList.getItems().add(g.getGuestName() + " [Regular]");
                txtGuestName.clear();
                txtGuestUsername.clear();
                txtGuestPassword.clear();                
            }
            else if (!(txtGuestName.getText().equalsIgnoreCase("")) 
                    && !(txtGuestUsername.getText().equalsIgnoreCase("")) 
                    && !(txtGuestPassword.getText().equalsIgnoreCase(""))
                    && type.equalsIgnoreCase("Value Guest"))
            {
                ValueGuest v = new ValueGuest(txtGuestUsername.getText(), 
                        txtGuestPassword.getText(), txtGuestName.getText());
                valueGuests.add(v);
                lvGuestList.getItems().add(v.getGuestName() + " [Value]");
                txtGuestName.clear();
                txtGuestUsername.clear();
                txtGuestPassword.clear();
            }
        });
        
        // Create Employee Tab
        Label lblEmployeeName = new Label("Employee's Name: ");
        TextField txtEmployeeName = new TextField();
        Label lblEmployeeUsername = new Label("Employee's Username: ");
        TextField txtEmployeeUsername = new TextField();
        Label lblEmployeePassword = new Label("Employee's Password: ");
        TextField txtEmployeePassword = new TextField();
        Label lblEmployeeList = new Label("Employees: ");
        ListView lvEmployeeList = new ListView();
        for (int i = 0; i < employees.size(); i++)
        {
            lvEmployeeList.getItems().add(employees.get(i).getEmployeeName());
        }
        Button btnCreateEmployee = new Button("Create Employee");
        Button btnLogout4 = new Button("Logout ->");
        btnLogout4.setOnAction(e ->
        {
            employeeStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnCreateEmployee.setOnAction(e ->
        {
            if (!(txtEmployeeName.getText().equalsIgnoreCase("") 
                    && !(txtEmployeeUsername.getText().equalsIgnoreCase("")) 
                    && !(txtEmployeePassword.getText().equalsIgnoreCase(""))))
            {
                Employee z = new Employee(txtEmployeeUsername.getText(), 
                        txtEmployeePassword.getText(), 
                        txtEmployeeName.getText());
                employees.add(z);
                lvEmployeeList.getItems().add(z.getEmployeeName());
                txtEmployeeName.clear();
                txtEmployeePassword.clear();
                txtEmployeeUsername.clear();
            }                
        });
        
        // Edit Room Tab
        Label sceneTitle1 = new Label("  Welcome " + employeeName);
        Label sceneTitle2 = new Label("  Welcome " + employeeName);
        Label sceneTitle3 = new Label("  Welcome " + employeeName);
        Label sceneTitle4 = new Label("  Welcome " + employeeName);
        Label sceneTitle5 = new Label("  Welcome " + employeeName);
        Label lblBookings = new Label("Booking Report: ");
        Button btnCreateRoom = new Button("Create a new Room");
        Button btnEditRoom = new Button("Edit a Room");
        Button btnActive = new Button("Set a Room Active/Inactive");
        Button btnLogout1 = new Button("Logout ->");
        
        
        // Pane
        TabPane employeeTabs = new TabPane();       
        
        GridPane bookReportPane = new GridPane();
        bookReportPane.setOnMouseEntered(e ->
        {
            lvBookings.getItems().clear();
            txtBookingReport.clear();
            for (int i = 0; i < bookings.size(); i++)
            {
                lvBookings.getItems().add("Room " 
                        + bookings.get(i).bookedRoom.roomNumber + " booked by " 
                        + bookings.get(i).bookingGuest.getGuestName()); 
            }
        });
        bookReportPane.setAlignment(Pos.CENTER);
        bookReportPane.setVgap(10);
        bookReportPane.setHgap(10);
        bookReportPane.add(sceneTitle1, 0, 0, 2, 1);
        bookReportPane.add(lblBookings, 2, 0);
        bookReportPane.add(lvBookings, 1, 1, 1, 15);
        bookReportPane.add(txtBookingReport, 2, 1, 1, 15);
        bookReportPane.add(btnViewBooking, 1, 16);
        bookReportPane.add(btnLogout2, 2, 16);
        
        GridPane checkOutPane = new GridPane();
        checkOutPane.setOnMouseEntered(e ->
        {
            lvGuests.getItems().clear();
            for (int i = 0; i < guests.size(); i++)
            {
                lvGuests.getItems().add(guests.get(i).getGuestName() + " [Regular]");
            }
            for (int i = 0; i < valueGuests.size(); i++)
            {
                lvGuests.getItems().add(valueGuests.get(i).getGuestName() + " [Value]");
            }
        });
        checkOutPane.setAlignment(Pos.CENTER);
        checkOutPane.setVgap(10);
        checkOutPane.setHgap(10);
        checkOutPane.add(sceneTitle2, 0, 0);
        checkOutPane.add(lblSelectGuest, 0, 1);
        checkOutPane.add(lblSelectRoom, 1, 1);
        checkOutPane.add(lvGuests, 0, 2, 1, 15);
        checkOutPane.add(lvRooms, 1, 2, 1, 15);
        checkOutPane.add(btnCheckOut, 1, 17);
        checkOutPane.add(btnLogout5, 2, 17);
        
        GridPane createGuestPane = new GridPane();
        createGuestPane.setAlignment(Pos.CENTER);
        createGuestPane.setVgap(10);
        createGuestPane.setHgap(10);
        createGuestPane.add(sceneTitle3, 0, 0);
        createGuestPane.add(lblSelectType, 0, 1);
        createGuestPane.add(guestTypeCombo, 1, 1);
        createGuestPane.add(lblGuestList, 2, 0);
        createGuestPane.add(lvGuestList, 2, 1, 1, 15);
        createGuestPane.add(lblGuestName, 0, 2);
        createGuestPane.add(txtGuestName, 1, 2);
        createGuestPane.add(lblGuestUsername, 0, 3);
        createGuestPane.add(txtGuestUsername, 1, 3);
        createGuestPane.add(lblGuestPassword, 0, 4);
        createGuestPane.add(txtGuestPassword, 1, 4);
        createGuestPane.add(btnCreateGuest, 0, 6);
        createGuestPane.add(btnLogout3, 1, 6);
        
        GridPane createEmployeePane = new GridPane();
        createEmployeePane.setAlignment(Pos.CENTER);
        createEmployeePane.setVgap(10);
        createEmployeePane.setHgap(10);
        createEmployeePane.add(sceneTitle4, 0, 0);
        createEmployeePane.add(lblEmployeeName, 0, 1);
        createEmployeePane.add(txtEmployeeName, 1, 1);
        createEmployeePane.add(lblEmployeeList, 2, 0);
        createEmployeePane.add(lvEmployeeList, 2, 1, 1, 15);
        createEmployeePane.add(lblEmployeeUsername, 0, 2);
        createEmployeePane.add(txtEmployeeUsername, 1, 2);
        createEmployeePane.add(lblEmployeePassword, 0, 3);
        createEmployeePane.add(txtEmployeePassword, 1, 3);
        createEmployeePane.add(btnCreateEmployee, 0, 5);
        createEmployeePane.add(btnLogout4, 1, 5);
        
        GridPane editRoomPane = new GridPane();
        editRoomPane.setAlignment(Pos.CENTER);
        editRoomPane.setVgap(10);
        editRoomPane.setHgap(10);
        editRoomPane.add(sceneTitle5, 0, 0);
        editRoomPane.add(btnCreateRoom, 0, 1);
        editRoomPane.add(btnEditRoom, 0, 2);
        editRoomPane.add(btnActive, 0, 3);
        editRoomPane.add(btnLogout1, 0, 5);
        
        btnLogout1.setOnAction(e ->
        {
            employeeStage.close();
            Stage loginStage = new Stage();
            start(loginStage);
        });
        btnCreateRoom.setOnAction(e ->
        {
            employeeStage.hide();
            Stage createRoomStage = new Stage();
            createRoom(createRoomStage, emp);
        });
        btnEditRoom.setOnAction(e -> 
        {
            employeeStage.hide();
            Stage editRoomStage = new Stage();
            selectRoom(editRoomStage, emp);
        });
        
        Tab bookReportTab = new Tab("Booking Report");
        bookReportTab.setContent(bookReportPane);
        employeeTabs.getTabs().add(bookReportTab);
        
        Tab checkOutTab = new Tab("Check Guest Out");
        checkOutTab.setContent(checkOutPane);
        employeeTabs.getTabs().add(checkOutTab);
        
        Tab createGuestTab = new Tab("Create Guest Account");
        createGuestTab.setContent(createGuestPane);
        employeeTabs.getTabs().add(createGuestTab);
        
        Tab createEmployeeTab = new Tab("Create Employee Account");
        createEmployeeTab.setContent(createEmployeePane);
        employeeTabs.getTabs().add(createEmployeeTab);
        
        Tab editRoomTab = new Tab("Create/Edit Room");
        editRoomTab.setContent(editRoomPane);
        employeeTabs.getTabs().add(editRoomTab);
        
        // Scene
        Scene employeeScene = new Scene(employeeTabs, 700, 600);
        
        // Stage
        employeeStage.setTitle("Madison Hotel - Employee Menu");
        employeeStage.setScene(employeeScene);
        employeeStage.show();
    }
    public void createRoom(Stage createRoomStage, Employee emp)
    {
        // Controls
        Label lblBed = new Label("  Bed: ");
        ComboBox bedCombo = new ComboBox();
        bedCombo.getItems().add("1x Queen Bed");
        bedCombo.getItems().add("2x Queen Bed");
        bedCombo.getItems().add("1x King Bed");
        Label lblKitch = new Label("  Kitchen: ");
        ComboBox kitchCombo = new ComboBox();
        kitchCombo.getItems().add("Microwave");
        kitchCombo.getItems().add("Fridge + Microwave");
        Label lblCoffee = new Label("  Coffee: ");
        ComboBox coffeeCombo = new ComboBox();
        coffeeCombo.getItems().add("1-Cup Std. Coffee Machine");
        coffeeCombo.getItems().add("Keurig Hot K200 Machine");
        Label lblAccess = new Label("  Accessibility: ");
        ComboBox accessCombo = new ComboBox();
        accessCombo.getItems().add("Standard Room");
        accessCombo.getItems().add("Enhanced Accessibility Room");
        Label lblRoomNumber = new Label("  Room Number: ");
        TextField txtRoomNumber = new TextField();
        Label lblRoomPrice = new Label("  Price per Night");
        TextField txtRoomPrice = new TextField();
        Button btnAddRoom = new Button("Add Room ->");
        Button btnEmpMenu = new Button("Employee Menu ->");
        ListView lvOutput = new ListView();
        for (int i = 0; i < rooms.size(); i++)
        {
            String booked = null;
            if (rooms.get(i).isBooked())
            {
                booked = "[Booked]";
            }
            else
            {
                booked = "[Available]";
            }
            lvOutput.getItems().add("Room " 
                    + rooms.get(i).roomNumber 
                    + " Booking Qty: " 
                    + rooms.get(i).getRoomBookedQuantity() 
                    + " " + booked);
        }
        
        btnEmpMenu.setOnAction(e ->
        {
            createRoomStage.hide();
            Stage employeeStage = new Stage();
            employee(employeeStage, emp);
        });
        
        btnAddRoom.setOnAction(e ->
        {
            String bed = (String) bedCombo.getValue();
            int bedChoice = 0;
            if (bed.equalsIgnoreCase("1x Queen Bed"))
            {
                bedChoice = 0;
            }
            else if (bed.equalsIgnoreCase("2x Queen Bed"))
            {
                bedChoice = 1;
            }
            else if (bed.equalsIgnoreCase("1x King Bed"))
            {
                bedChoice = 2;
            }
            String kitch = (String) kitchCombo.getValue();
            int kitchChoice = 0;
            if (kitch.equalsIgnoreCase("Microwave"))
            {
                kitchChoice = 0;
            }
            else if (kitch.equalsIgnoreCase("Fridge + Microwave"))
            {
                kitchChoice = 1;
            }
            String coffee = (String) coffeeCombo.getValue();
            int coffeeChoice = 0;
            if (coffee.equalsIgnoreCase("1-Cup Std. Coffee Machine"))
            {
                coffeeChoice = 0;
            }
            else if (coffee.equalsIgnoreCase("Keurig Hot K200 Machine"))
            {
                coffeeChoice = 1;
            }
            String access = (String) accessCombo.getValue();
            int accessChoice = 0;
            if (access.equalsIgnoreCase("Standard Room"))
            {
                accessChoice = 0;
            }
            else if (access.equalsIgnoreCase("Enhanced Accessibility Room"))
            {
                accessChoice = 1;
            }
            int count = 0;
            int roomNumber = 0;
            for (int i = 0; i < rooms.size(); i++)
            {
                if (Integer.parseInt(txtRoomNumber.getText()) == rooms.get(i).roomNumber)
                {
                    count++;
                }
            }
            if (!(count > 0))
            {
                roomNumber = Integer.parseInt(txtRoomNumber.getText());
            }
            double roomPrice = 0;
            roomPrice = Double.parseDouble(txtRoomPrice.getText());
            if (bed != null && kitch != null && coffee != null 
                    && access != null && roomNumber > 0 && roomPrice > 0)
            {
                Room r = new Room(bedChoice, kitchChoice, coffeeChoice, 
                        accessChoice, roomNumber, roomPrice);
                rooms.add(r);
                for (int i = 0; i < rooms.size(); i++)
                {
                    if (rooms.get(i).equals(r))
                    {
                        String booked = null;
                        if (rooms.get(i).isBooked())
                        {
                            booked = "[Booked]";
                        }
                        else
                        {
                            booked = "[Available]";
                        }
                        lvOutput.getItems().add("Room " 
                                + rooms.get(i).roomNumber 
                                + " Booking Qty: " 
                                + rooms.get(i).getRoomBookedQuantity() 
                                + " " + booked);
                    }
                }
            }
        });        
        
        // Pane        
        GridPane createRoomPane = new GridPane();
        createRoomPane.setVgap(20);
        createRoomPane.setHgap(20);
        createRoomPane.add(lblBed, 0, 1);
        createRoomPane.add(bedCombo, 1, 1);
        createRoomPane.add(lblKitch, 0, 2);
        createRoomPane.add(kitchCombo, 1, 2);
        createRoomPane.add(lblCoffee, 0, 3);
        createRoomPane.add(coffeeCombo, 1, 3);
        createRoomPane.add(lblAccess, 0, 4);
        createRoomPane.add(accessCombo, 1, 4);
        createRoomPane.add(lblRoomNumber, 0, 10);
        createRoomPane.add(txtRoomNumber, 1, 10);
        createRoomPane.add(btnAddRoom, 1, 16);
        createRoomPane.add(btnEmpMenu, 3, 16);
        createRoomPane.add(lvOutput, 3, 1, 1, 15);
        createRoomPane.add(lblRoomPrice, 0, 11);
        createRoomPane.add(txtRoomPrice, 1, 11);
        
        // Scene
        Scene createRoomScene = new Scene(createRoomPane, 630, 520);
        
        // Stage
        createRoomStage.setTitle("Madison Hotel - Create a Room");
        createRoomStage.setScene(createRoomScene);
        createRoomStage.show();
    }
        public void selectRoom(Stage editRoomStage, Employee emp) {
        //Controls
        Button btnEmpMenu = new Button("Back to Employee Menu ->");
        Label lblRoomSelection = new Label("Select room to edit: ");
        ComboBox roomSelectionCombo = new ComboBox();
        Button btnEditThisRoom = new Button("Edit this room ->");
        ListView lvOutput = new ListView();
        
        String[] roomNumbers = new String[rooms.size()];
        for (int i=0; i<rooms.size(); i++) {
            roomNumbers[i] = Integer.toString(rooms.get(i).roomNumber);
            roomSelectionCombo.getItems().add(roomNumbers[i]);
        }

        btnEditThisRoom.setOnAction(e -> 
        {
        String roomSelection = (String)roomSelectionCombo.getValue();
        int room = 0;
        for (int i=0; i<rooms.size(); i++) {
            if (roomSelection.equals(String.valueOf(rooms.get(i).roomNumber))) {
                room = i;
            }
        }
        editRoomStage.hide();
        Stage editSelectedRoomStage = new Stage();
        editRoom(editSelectedRoomStage, emp, room);
        });
        
        btnEmpMenu.setOnAction(e ->
        {
            editRoomStage.hide();
            Stage employeeStage = new Stage();
            employee(employeeStage, emp);
        });


        
        for (int i = 0; i < rooms.size(); i++)
        {
            String booked = null;
            if (rooms.get(i).isBooked())
            {
                booked = "[Booked]";
            }
            else
            {
                booked = "[Available]";
            }
            lvOutput.getItems().add("Room " 
                    + rooms.get(i).roomNumber 
                    + " Booking Qty: " 
                    + rooms.get(i).getRoomBookedQuantity() 
                    + " " + booked);
        }
        
        btnEmpMenu.setOnAction(e ->
        {
            editRoomStage.hide();
            Stage employeeStage = new Stage();
            employee(employeeStage, emp);
        });
        
        //Pane
        GridPane editRoomPane = new GridPane();
        editRoomPane.setVgap(20);
        editRoomPane.setHgap(20);
        editRoomPane.add(lblRoomSelection, 2, 1);
        editRoomPane.add(roomSelectionCombo, 2, 2);
        editRoomPane.add(btnEditThisRoom,2,3);
        editRoomPane.add(btnEmpMenu,2,5);
        editRoomPane.add(lvOutput, 3, 1, 1, 15);
        
        // Scene
        Scene editRoomScene = new Scene(editRoomPane, 630, 520);
        
        // Stage
        editRoomStage.setTitle("Madison Hotel - Select Room to Edit");
        editRoomStage.setScene(editRoomScene);
        editRoomStage.show();
    }
    
    public void editRoom(Stage editSelectedRoomStage, Employee emp, int room) {
        //Controls
        Label lblCurrentRoom = new Label("Editing room #" + rooms.get(room).roomNumber);
        Label lblBed = new Label("  New Bed Option: ");
        ComboBox bedCombo = new ComboBox();
        bedCombo.getItems().add("1x Queen Bed");
        bedCombo.getItems().add("2x Queen Bed");
        bedCombo.getItems().add("1x King Bed");
        Label lblKitch = new Label("  New Kitchen Option: ");
        ComboBox kitchCombo = new ComboBox();
        kitchCombo.getItems().add("Microwave");
        kitchCombo.getItems().add("Fridge + Microwave");
        Label lblCoffee = new Label("  New Coffee Option: ");
        ComboBox coffeeCombo = new ComboBox();
        coffeeCombo.getItems().add("1-Cup Std. Coffee Machine");
        coffeeCombo.getItems().add("Keurig Hot K200 Machine");
        Label lblAccess = new Label("  New Accessibility Option: ");
        ComboBox accessCombo = new ComboBox();
        accessCombo.getItems().add("Standard Room");
        accessCombo.getItems().add("Enhanced Accessibility Room");
        Label lblActivity = new Label("  Room Status:  ");
        ComboBox activityCombo = new ComboBox();
        activityCombo.getItems().add("Active");
        activityCombo.getItems().add("Inactive");
        Label lblRoomNumber = new Label(" New Room Number: ");
        TextField txtRoomNumber = new TextField();
        Label lblRoomPrice = new Label("  New Price per Night: ");
        TextField txtRoomPrice = new TextField();
        Button btnApplyChanges = new Button("Apply selected changes ->");
        Button btnEmpMenu = new Button("Return to Employee Menu");
        Label txtConfirm = new Label();
        ListView lvOutput = new ListView();
        lvOutput.getItems().add("Current Room Specifications:\n\nBed: " + rooms.get(room).printBedOption()
        + "\n\nCoffee: " + rooms.get(room).printCoffeeOption() + "\n\nKitchen: " + rooms.get(room).printKitchOption() 
        + "\n\nAccessibility: " + rooms.get(room).printAccessOption() + "\n\nRoom Number: " + rooms.get(room).roomNumber 
        + "\n\nRoom Cost Per Night: " + rooms.get(room).roomCostPerNight + "\n\nRoom Status: " + rooms.get(room).getRoomActivity());
        //Label lblroomSpecs = new Label("Current Room Specifications:\n\nBed: " + rooms.get(room).printBedOption()
        //+ "\n\nCoffee: " + rooms.get(room).printCoffeeOption() + "\n\nKitchen: " + rooms.get(room).printCoffeeOption() 
        //+ "\n\nAccessibility: " + rooms.get(room).printAccessOption() + "\n\nRoom Number: " + rooms.get(room).roomNumber 
        //+ "\n\nRoom Cost Per Night: " + rooms.get(room).roomCostPerNight);
        
        btnApplyChanges.setOnAction(e -> 
        {
            String bed = (String) bedCombo.getValue();
            int bedChoice = 0;
            if (bed.equalsIgnoreCase("1x Queen Bed"))
            {
                bedChoice = 0;
            }
            else if (bed.equalsIgnoreCase("2x Queen Bed"))
            {
                bedChoice = 1;
            }
            else if (bed.equalsIgnoreCase("1x King Bed"))
            {
                bedChoice = 2;
            }
            String kitch = (String) kitchCombo.getValue();
            int kitchChoice = 0;
            if (kitch.equalsIgnoreCase("Microwave"))
            {
                kitchChoice = 0;
            }
            else if (kitch.equalsIgnoreCase("Fridge + Microwave"))
            {
                kitchChoice = 1;
            }
            String coffee = (String) coffeeCombo.getValue();
            int coffeeChoice = 0;
            if (coffee.equalsIgnoreCase("1-Cup Std. Coffee Machine"))
            {
                coffeeChoice = 0;
            }
            else if (coffee.equalsIgnoreCase("Keurig Hot K200 Machine"))
            {
                coffeeChoice = 1;
            }
            String access = (String) accessCombo.getValue();
            int accessChoice = 0;
            if (access.equalsIgnoreCase("Standard Room"))
            {
                accessChoice = 0;
            }
            else if (access.equalsIgnoreCase("Enhanced Accessibility Room"))
            {
                accessChoice = 1;
            }
            String activity = (String)activityCombo.getValue();
            int activityChoice = 0;
            if (activity.equalsIgnoreCase("Active")) {
                rooms.get(room).setRoomActivity("Active");
            } else if (activity.equalsIgnoreCase("Inactive")) {
                rooms.get(room).setRoomActivity("Inactive");
            }
            int count = 0;
            int roomNumber = 0;
            for (int i = 0; i < rooms.size(); i++)
            {
                if (Integer.parseInt(txtRoomNumber.getText()) == rooms.get(i).roomNumber)
                {
                    if (Integer.parseInt(txtRoomNumber.getText()) == rooms.get(room).roomNumber) {
                        break;
                    }
                    count++;
                }
            }
            if (!(count > 0))
            {
                roomNumber = Integer.parseInt(txtRoomNumber.getText());
            }
            if (count > 0) {
                txtConfirm.setText("Room number already taken, try another!\n"); 
            } else if (kitchCombo.getValue() ==null || coffeeCombo.getValue() ==null
                    || accessCombo.getValue() ==null || bedCombo.getValue() == null || 
                    txtRoomNumber.getText() == null || txtRoomPrice.getText() ==null) {
                txtConfirm.setText(txtConfirm.getText() + "Sorry, invalid option(s)! Please select"
                        + "an option for everything!");
            } else {
                txtConfirm.setText("Changes successfully made!");
            }
            double roomPrice = 0;
            roomPrice = Double.parseDouble(txtRoomPrice.getText());
            
            rooms.get(room).bedOption = bedChoice;
            rooms.get(room).coffeeOption = coffeeChoice;
            rooms.get(room).kitchenOption = kitchChoice;
            rooms.get(room).accessibleOption = accessChoice;
            rooms.get(room).roomNumber = roomNumber;
            rooms.get(room).roomCostPerNight = roomPrice;
        });
        
        btnApplyChanges.setOnMouseReleased(e -> 
        {
        lvOutput.getItems().clear();
        lvOutput.getItems().add("Current Room Specifications:\n\nBed: " + rooms.get(room).printBedOption()
        + "\n\nKitchen: " + rooms.get(room).printKitchOption() + "\n\nCoffee: " + rooms.get(room).printCoffeeOption() 
        + "\n\nAccessibility: " + rooms.get(room).printAccessOption() + "\n\nRoom Number: " + rooms.get(room).roomNumber 
        + "\n\nRoom Cost Per Night: " + rooms.get(room).roomCostPerNight + "\n\nRoom Status: " + rooms.get(room).getRoomActivity());
        });
        
        btnEmpMenu.setOnAction(e -> 
        {
            editSelectedRoomStage.hide();
            Stage employeeStage = new Stage();
            employee(employeeStage, emp);
        });
        
        //Pane
        GridPane editSelectedRoomPane = new GridPane();
        editSelectedRoomPane.setVgap(10);
        editSelectedRoomPane.setHgap(10);
        editSelectedRoomPane.add(lblCurrentRoom,1,1);
        editSelectedRoomPane.add(lblKitch, 1, 5);
        editSelectedRoomPane.add(kitchCombo,1,6);
        editSelectedRoomPane.add(lblBed,1,3);
        editSelectedRoomPane.add(lblActivity,2,3);
        editSelectedRoomPane.add(bedCombo,1,4);
        editSelectedRoomPane.add(lblCoffee,1,7);
        editSelectedRoomPane.add(coffeeCombo,1,8);
        editSelectedRoomPane.add(lblAccess,1,9);
        editSelectedRoomPane.add(accessCombo,1,10);
        editSelectedRoomPane.add(lblRoomNumber,1,11);
        editSelectedRoomPane.add(txtRoomNumber,1,12);
        editSelectedRoomPane.add(lblRoomPrice,1,13);
        editSelectedRoomPane.add(txtRoomPrice,1,14);
        editSelectedRoomPane.add(activityCombo,2,4);
        editSelectedRoomPane.add(lvOutput, 8, 1,1,13);
        editSelectedRoomPane.add(txtConfirm, 1, 16);
        editSelectedRoomPane.add(btnApplyChanges, 1, 15);
        editSelectedRoomPane.add(btnEmpMenu,8, 15);
        
        //Scene
        Scene editSelectedRoomScene = new Scene(editSelectedRoomPane,630,520);
        
        //Stage
        editSelectedRoomStage.setTitle("Madison Hotel - Edit a Room");
        editSelectedRoomStage.setScene(editSelectedRoomScene);
        editSelectedRoomStage.show();
        
    }
    public void changeGuestName(Stage changeGuestNameStage, Guest guest)
    {
        // Controls
        Label lblCurrentName1 = new Label("Current Name: ");
        Label lblCurrentName2 = new Label(guest.getGuestName());
        Label lblNewName = new Label("New Name: ");
        TextField txtNewName = new TextField();
        Button btnChangeName = new Button("Change Name");
        btnChangeName.setOnAction(e ->
        {
            String name = txtNewName.getText();
            if (name != null && !(name.equalsIgnoreCase("") 
                    && !(name.equalsIgnoreCase(" "))))
            {
                guest.setGuestName(name);
                changeGuestNameStage.close();
                Stage guestStage = new Stage();
                guest(guestStage, guest);                
            }
        });
        
        // Pane
        GridPane changeNamePane = new GridPane();
        changeNamePane.setAlignment(Pos.CENTER);
        changeNamePane.setVgap(10);
        changeNamePane.setHgap(10);
        changeNamePane.add(lblCurrentName1, 0, 0);
        changeNamePane.add(lblCurrentName2, 1, 0);
        changeNamePane.add(lblNewName, 0, 1);
        changeNamePane.add(txtNewName, 1, 1);
        changeNamePane.add(btnChangeName, 1, 3);
        
        
        // Scene
        Scene changeNameScene = new Scene(changeNamePane, 500, 300);
        
        // Stage
        changeGuestNameStage.setTitle("Change Guest Name");
        changeGuestNameStage.setScene(changeNameScene);
        changeGuestNameStage.show();
    }
    public void stop()
    {
        //this will run before any program ends
        //code in here is guaranteed to run before the program closes
        //cleanup method
        //update the database with all current objects
    }
    public static void main(String args[])
    {
        Employee employee1 = new Employee("Adam", "pass", "Adam Hitchings");
        employees.add(employee1);
        Guest guest1 = new Guest("Brendan", "pass", "Brendan Boyle");
        guests.add(guest1);
        Guest guest2 = new Guest("John", "pass", "Johnny Guo");
        guests.add(guest2);
        Room room1 = new Room(0, 0, 0, 0, 100, 200.0);
        rooms.add(room1);
        Room room2 = new Room(1, 1, 1, 1, 201, 200.0);
        rooms.add(room2);
        Room room3 = new Room(2, 1, 0, 1, 302, 300.0);
        rooms.add(room3);
        ValueGuest valueGuest1 = new ValueGuest("George", "pass", "George Moy");
        valueGuests.add(valueGuest1);
        Room room4 = new Room(2, 0, 0, 0, 308, 150.0);
        rooms.add(room4);
        Room room5 = new Room(1, 1, 1, 1, 400, 250.0);
        rooms.add(room5);
        Booking book1 = new Booking(guest1, room3, 2005, 1, 4);
        bookings.add(book1);
        Booking book2 = new Booking(guest1, room4, 2005, 1, 4);
        bookings.add(book2);
        
        Application.launch(args);
    }
    public static void print()
    {
        System.out.println(" ");
    }
}
